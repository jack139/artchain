// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trans/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgCreateTransaction struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RecType     string `protobuf:"bytes,2,opt,name=recType,proto3" json:"recType,omitempty"`
	AuctionId   string `protobuf:"bytes,3,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	ItemId      string `protobuf:"bytes,4,opt,name=itemId,proto3" json:"itemId,omitempty"`
	TransType   string `protobuf:"bytes,5,opt,name=transType,proto3" json:"transType,omitempty"`
	UserId      string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	TransDate   string `protobuf:"bytes,7,opt,name=transDate,proto3" json:"transDate,omitempty"`
	HammerTime  string `protobuf:"bytes,8,opt,name=hammerTime,proto3" json:"hammerTime,omitempty"`
	HammerPrice string `protobuf:"bytes,9,opt,name=hammerPrice,proto3" json:"hammerPrice,omitempty"`
	Details     string `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
	Status      string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateTransaction) Reset()         { *m = MsgCreateTransaction{} }
func (m *MsgCreateTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTransaction) ProtoMessage()    {}
func (*MsgCreateTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafbc61d59eabb4e, []int{0}
}
func (m *MsgCreateTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTransaction.Merge(m, src)
}
func (m *MsgCreateTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTransaction proto.InternalMessageInfo

func (m *MsgCreateTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTransaction) GetRecType() string {
	if m != nil {
		return m.RecType
	}
	return ""
}

func (m *MsgCreateTransaction) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

func (m *MsgCreateTransaction) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

func (m *MsgCreateTransaction) GetTransType() string {
	if m != nil {
		return m.TransType
	}
	return ""
}

func (m *MsgCreateTransaction) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *MsgCreateTransaction) GetTransDate() string {
	if m != nil {
		return m.TransDate
	}
	return ""
}

func (m *MsgCreateTransaction) GetHammerTime() string {
	if m != nil {
		return m.HammerTime
	}
	return ""
}

func (m *MsgCreateTransaction) GetHammerPrice() string {
	if m != nil {
		return m.HammerPrice
	}
	return ""
}

func (m *MsgCreateTransaction) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *MsgCreateTransaction) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateTransactionResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateTransactionResponse) Reset()         { *m = MsgCreateTransactionResponse{} }
func (m *MsgCreateTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTransactionResponse) ProtoMessage()    {}
func (*MsgCreateTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafbc61d59eabb4e, []int{1}
}
func (m *MsgCreateTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTransactionResponse.Merge(m, src)
}
func (m *MsgCreateTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTransactionResponse proto.InternalMessageInfo

func (m *MsgCreateTransactionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateTransaction struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RecType     string `protobuf:"bytes,3,opt,name=recType,proto3" json:"recType,omitempty"`
	AuctionId   string `protobuf:"bytes,4,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	ItemId      string `protobuf:"bytes,5,opt,name=itemId,proto3" json:"itemId,omitempty"`
	TransType   string `protobuf:"bytes,6,opt,name=transType,proto3" json:"transType,omitempty"`
	UserId      string `protobuf:"bytes,7,opt,name=userId,proto3" json:"userId,omitempty"`
	TransDate   string `protobuf:"bytes,8,opt,name=transDate,proto3" json:"transDate,omitempty"`
	HammerTime  string `protobuf:"bytes,9,opt,name=hammerTime,proto3" json:"hammerTime,omitempty"`
	HammerPrice string `protobuf:"bytes,10,opt,name=hammerPrice,proto3" json:"hammerPrice,omitempty"`
	Details     string `protobuf:"bytes,11,opt,name=details,proto3" json:"details,omitempty"`
	Status      string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateTransaction) Reset()         { *m = MsgUpdateTransaction{} }
func (m *MsgUpdateTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTransaction) ProtoMessage()    {}
func (*MsgUpdateTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafbc61d59eabb4e, []int{2}
}
func (m *MsgUpdateTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTransaction.Merge(m, src)
}
func (m *MsgUpdateTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTransaction proto.InternalMessageInfo

func (m *MsgUpdateTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTransaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateTransaction) GetRecType() string {
	if m != nil {
		return m.RecType
	}
	return ""
}

func (m *MsgUpdateTransaction) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

func (m *MsgUpdateTransaction) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

func (m *MsgUpdateTransaction) GetTransType() string {
	if m != nil {
		return m.TransType
	}
	return ""
}

func (m *MsgUpdateTransaction) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *MsgUpdateTransaction) GetTransDate() string {
	if m != nil {
		return m.TransDate
	}
	return ""
}

func (m *MsgUpdateTransaction) GetHammerTime() string {
	if m != nil {
		return m.HammerTime
	}
	return ""
}

func (m *MsgUpdateTransaction) GetHammerPrice() string {
	if m != nil {
		return m.HammerPrice
	}
	return ""
}

func (m *MsgUpdateTransaction) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *MsgUpdateTransaction) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateTransactionResponse struct {
}

func (m *MsgUpdateTransactionResponse) Reset()         { *m = MsgUpdateTransactionResponse{} }
func (m *MsgUpdateTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTransactionResponse) ProtoMessage()    {}
func (*MsgUpdateTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafbc61d59eabb4e, []int{3}
}
func (m *MsgUpdateTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTransactionResponse.Merge(m, src)
}
func (m *MsgUpdateTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTransactionResponse proto.InternalMessageInfo

type MsgDeleteTransaction struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteTransaction) Reset()         { *m = MsgDeleteTransaction{} }
func (m *MsgDeleteTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTransaction) ProtoMessage()    {}
func (*MsgDeleteTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafbc61d59eabb4e, []int{4}
}
func (m *MsgDeleteTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTransaction.Merge(m, src)
}
func (m *MsgDeleteTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTransaction proto.InternalMessageInfo

func (m *MsgDeleteTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteTransaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteTransactionResponse struct {
}

func (m *MsgDeleteTransactionResponse) Reset()         { *m = MsgDeleteTransactionResponse{} }
func (m *MsgDeleteTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTransactionResponse) ProtoMessage()    {}
func (*MsgDeleteTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafbc61d59eabb4e, []int{5}
}
func (m *MsgDeleteTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTransactionResponse.Merge(m, src)
}
func (m *MsgDeleteTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTransactionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateTransaction)(nil), "jack139.artchain.trans.MsgCreateTransaction")
	proto.RegisterType((*MsgCreateTransactionResponse)(nil), "jack139.artchain.trans.MsgCreateTransactionResponse")
	proto.RegisterType((*MsgUpdateTransaction)(nil), "jack139.artchain.trans.MsgUpdateTransaction")
	proto.RegisterType((*MsgUpdateTransactionResponse)(nil), "jack139.artchain.trans.MsgUpdateTransactionResponse")
	proto.RegisterType((*MsgDeleteTransaction)(nil), "jack139.artchain.trans.MsgDeleteTransaction")
	proto.RegisterType((*MsgDeleteTransactionResponse)(nil), "jack139.artchain.trans.MsgDeleteTransactionResponse")
}

func init() { proto.RegisterFile("trans/tx.proto", fileDescriptor_fafbc61d59eabb4e) }

var fileDescriptor_fafbc61d59eabb4e = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xd2, 0x2e, 0x5d, 0x5c, 0x34, 0x69, 0x16, 0x9a, 0x2c, 0x34, 0x59, 0x53, 0x4e, 0x20,
	0xa1, 0x44, 0x30, 0x2e, 0xdc, 0x10, 0xdb, 0xa5, 0x87, 0x49, 0xa8, 0x2a, 0x17, 0x6e, 0x5e, 0xf2,
	0xd4, 0x1a, 0x96, 0x1f, 0xb2, 0x1d, 0x6d, 0xfb, 0x2f, 0xf8, 0xb3, 0x7a, 0xec, 0xb1, 0x47, 0xd4,
	0xfe, 0x03, 0xfc, 0x09, 0xc8, 0x76, 0x52, 0x82, 0xd2, 0x04, 0xd8, 0xf1, 0x7d, 0xef, 0x7d, 0xef,
	0x73, 0xbe, 0xcf, 0x31, 0x3a, 0x51, 0x82, 0x65, 0x32, 0x52, 0x0f, 0x61, 0x21, 0x72, 0x95, 0xe3,
	0xb3, 0xaf, 0x2c, 0xfe, 0xf6, 0xe6, 0xf2, 0x7d, 0xc8, 0x84, 0x8a, 0x97, 0x8c, 0x67, 0xa1, 0x19,
	0x08, 0x56, 0x2e, 0x7a, 0x7e, 0x23, 0x17, 0x57, 0x02, 0x98, 0x82, 0xb9, 0x86, 0x58, 0xac, 0x78,
	0x9e, 0x61, 0x82, 0xc6, 0xb1, 0x06, 0x73, 0x41, 0x9c, 0x0b, 0xe7, 0xa5, 0x3f, 0xab, 0x4b, 0xdd,
	0x11, 0x10, 0xcf, 0x1f, 0x0b, 0x20, 0xae, 0xed, 0x54, 0x25, 0x3e, 0x47, 0x3e, 0x2b, 0x0d, 0x7d,
	0x9a, 0x90, 0xa1, 0xe9, 0xfd, 0x06, 0xf0, 0x19, 0xf2, 0xb8, 0x82, 0x74, 0x9a, 0x90, 0x91, 0x69,
	0x55, 0x95, 0x66, 0x99, 0xb3, 0x98, 0x8d, 0x47, 0x96, 0xb5, 0x07, 0x34, 0xab, 0x94, 0x20, 0xa6,
	0x09, 0xf1, 0x2c, 0xcb, 0x56, 0x7b, 0xd6, 0x35, 0x53, 0x40, 0xc6, 0x0d, 0x96, 0x06, 0x30, 0x45,
	0x68, 0xc9, 0xd2, 0x14, 0xc4, 0x9c, 0xa7, 0x40, 0x8e, 0x4d, 0xbb, 0x81, 0xe0, 0x0b, 0x34, 0xb1,
	0xd5, 0x27, 0xc1, 0x63, 0x20, 0xbe, 0x19, 0x68, 0x42, 0xfa, 0x2b, 0x13, 0x50, 0x8c, 0xdf, 0x49,
	0x82, 0xec, 0x57, 0x56, 0xa5, 0x3e, 0x91, 0x54, 0x4c, 0x95, 0x92, 0x4c, 0xec, 0x89, 0x6c, 0x15,
	0x84, 0xe8, 0xfc, 0x90, 0x93, 0x33, 0x90, 0x45, 0x9e, 0x49, 0xc0, 0x27, 0xc8, 0xe5, 0x89, 0x31,
	0x73, 0x34, 0x73, 0x79, 0x12, 0x6c, 0xac, 0xf5, 0x9f, 0x8b, 0xe4, 0x9f, 0xad, 0xb7, 0x2b, 0xdc,
	0x7a, 0x45, 0x33, 0x8a, 0x61, 0x4f, 0x14, 0xa3, 0xee, 0x28, 0x8e, 0xba, 0xa3, 0xf0, 0xba, 0xa3,
	0x18, 0x77, 0x47, 0x71, 0xdc, 0x1f, 0x85, 0xff, 0xb7, 0x28, 0x50, 0x6f, 0x14, 0x93, 0xae, 0x28,
	0x9e, 0xfd, 0x11, 0x05, 0x35, 0x51, 0xb4, 0x9c, 0xad, 0xa3, 0x08, 0x3e, 0x18, 0xe7, 0xaf, 0xe1,
	0x0e, 0x9e, 0xe8, 0x7c, 0xa5, 0xd0, 0xda, 0x50, 0x2b, 0xbc, 0xfd, 0xe9, 0xa2, 0xe1, 0x8d, 0x5c,
	0xe0, 0x7b, 0x74, 0xda, 0xfe, 0xb7, 0x5e, 0x87, 0x87, 0xff, 0xc6, 0xf0, 0xd0, 0xfd, 0x79, 0xf1,
	0xee, 0x7f, 0xa6, 0xf7, 0xb7, 0xed, 0x1e, 0x9d, 0xb6, 0x6f, 0x56, 0x9f, 0x70, 0x6b, 0xba, 0x57,
	0xb8, 0xd3, 0x5b, 0x2d, 0xdc, 0x36, 0xb6, 0x4f, 0xb8, 0x35, 0xdd, 0x2b, 0xdc, 0x69, 0xf9, 0xc7,
	0xab, 0xd5, 0x96, 0x3a, 0xeb, 0x2d, 0x75, 0x7e, 0x6c, 0xa9, 0xf3, 0x7d, 0x47, 0x07, 0xeb, 0x1d,
	0x1d, 0x6c, 0x76, 0x74, 0xf0, 0xe5, 0xd5, 0x82, 0xab, 0x65, 0x79, 0x1b, 0xc6, 0x79, 0x1a, 0x55,
	0x9b, 0xa3, 0x7a, 0x73, 0xf4, 0x10, 0x55, 0x4f, 0xe5, 0x63, 0x01, 0xf2, 0xd6, 0x33, 0xcf, 0xe5,
	0xe5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0xfc, 0x91, 0xd0, 0x40, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	CreateTransaction(ctx context.Context, in *MsgCreateTransaction, opts ...grpc.CallOption) (*MsgCreateTransactionResponse, error)
	UpdateTransaction(ctx context.Context, in *MsgUpdateTransaction, opts ...grpc.CallOption) (*MsgUpdateTransactionResponse, error)
	DeleteTransaction(ctx context.Context, in *MsgDeleteTransaction, opts ...grpc.CallOption) (*MsgDeleteTransactionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateTransaction(ctx context.Context, in *MsgCreateTransaction, opts ...grpc.CallOption) (*MsgCreateTransactionResponse, error) {
	out := new(MsgCreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/jack139.artchain.trans.Msg/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTransaction(ctx context.Context, in *MsgUpdateTransaction, opts ...grpc.CallOption) (*MsgUpdateTransactionResponse, error) {
	out := new(MsgUpdateTransactionResponse)
	err := c.cc.Invoke(ctx, "/jack139.artchain.trans.Msg/UpdateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTransaction(ctx context.Context, in *MsgDeleteTransaction, opts ...grpc.CallOption) (*MsgDeleteTransactionResponse, error) {
	out := new(MsgDeleteTransactionResponse)
	err := c.cc.Invoke(ctx, "/jack139.artchain.trans.Msg/DeleteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	CreateTransaction(context.Context, *MsgCreateTransaction) (*MsgCreateTransactionResponse, error)
	UpdateTransaction(context.Context, *MsgUpdateTransaction) (*MsgUpdateTransactionResponse, error)
	DeleteTransaction(context.Context, *MsgDeleteTransaction) (*MsgDeleteTransactionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateTransaction(ctx context.Context, req *MsgCreateTransaction) (*MsgCreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedMsgServer) UpdateTransaction(ctx context.Context, req *MsgUpdateTransaction) (*MsgUpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (*UnimplementedMsgServer) DeleteTransaction(ctx context.Context, req *MsgDeleteTransaction) (*MsgDeleteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jack139.artchain.trans.Msg/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTransaction(ctx, req.(*MsgCreateTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jack139.artchain.trans.Msg/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTransaction(ctx, req.(*MsgUpdateTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jack139.artchain.trans.Msg/DeleteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTransaction(ctx, req.(*MsgDeleteTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jack139.artchain.trans.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _Msg_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _Msg_UpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _Msg_DeleteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trans/tx.proto",
}

func (m *MsgCreateTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.HammerPrice) > 0 {
		i -= len(m.HammerPrice)
		copy(dAtA[i:], m.HammerPrice)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HammerPrice)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HammerTime) > 0 {
		i -= len(m.HammerTime)
		copy(dAtA[i:], m.HammerTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HammerTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TransDate) > 0 {
		i -= len(m.TransDate)
		copy(dAtA[i:], m.TransDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TransType) > 0 {
		i -= len(m.TransType)
		copy(dAtA[i:], m.TransType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ItemId) > 0 {
		i -= len(m.ItemId)
		copy(dAtA[i:], m.ItemId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ItemId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AuctionId) > 0 {
		i -= len(m.AuctionId)
		copy(dAtA[i:], m.AuctionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuctionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecType) > 0 {
		i -= len(m.RecType)
		copy(dAtA[i:], m.RecType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.HammerPrice) > 0 {
		i -= len(m.HammerPrice)
		copy(dAtA[i:], m.HammerPrice)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HammerPrice)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.HammerTime) > 0 {
		i -= len(m.HammerTime)
		copy(dAtA[i:], m.HammerTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HammerTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransDate) > 0 {
		i -= len(m.TransDate)
		copy(dAtA[i:], m.TransDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TransType) > 0 {
		i -= len(m.TransType)
		copy(dAtA[i:], m.TransType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ItemId) > 0 {
		i -= len(m.ItemId)
		copy(dAtA[i:], m.ItemId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ItemId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AuctionId) > 0 {
		i -= len(m.AuctionId)
		copy(dAtA[i:], m.AuctionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuctionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecType) > 0 {
		i -= len(m.RecType)
		copy(dAtA[i:], m.RecType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AuctionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ItemId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HammerTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HammerPrice)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.RecType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AuctionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ItemId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HammerTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HammerPrice)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HammerTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HammerTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HammerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HammerPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HammerTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HammerTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HammerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HammerPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
