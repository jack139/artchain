// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inventory/item.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id             uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RecType        string `protobuf:"bytes,3,opt,name=recType,proto3" json:"recType,omitempty"`
	ItemDesc       string `protobuf:"bytes,4,opt,name=itemDesc,proto3" json:"itemDesc,omitempty"`
	ItemDetail     string `protobuf:"bytes,5,opt,name=itemDetail,proto3" json:"itemDetail,omitempty"`
	ItemDate       string `protobuf:"bytes,6,opt,name=itemDate,proto3" json:"itemDate,omitempty"`
	ItemType       string `protobuf:"bytes,7,opt,name=itemType,proto3" json:"itemType,omitempty"`
	ItemSubject    string `protobuf:"bytes,8,opt,name=itemSubject,proto3" json:"itemSubject,omitempty"`
	ItemMedia      string `protobuf:"bytes,9,opt,name=itemMedia,proto3" json:"itemMedia,omitempty"`
	ItemSize       string `protobuf:"bytes,10,opt,name=itemSize,proto3" json:"itemSize,omitempty"`
	ItemImage      string `protobuf:"bytes,11,opt,name=itemImage,proto3" json:"itemImage,omitempty"`
	AESKey         string `protobuf:"bytes,12,opt,name=AESKey,json=aESKey,proto3" json:"AESKey,omitempty"`
	ItemBasePrice  string `protobuf:"bytes,13,opt,name=itemBasePrice,proto3" json:"itemBasePrice,omitempty"`
	CurrentOwnerId string `protobuf:"bytes,14,opt,name=currentOwnerId,proto3" json:"currentOwnerId,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ef12a06e9d67fd, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Item) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetRecType() string {
	if m != nil {
		return m.RecType
	}
	return ""
}

func (m *Item) GetItemDesc() string {
	if m != nil {
		return m.ItemDesc
	}
	return ""
}

func (m *Item) GetItemDetail() string {
	if m != nil {
		return m.ItemDetail
	}
	return ""
}

func (m *Item) GetItemDate() string {
	if m != nil {
		return m.ItemDate
	}
	return ""
}

func (m *Item) GetItemType() string {
	if m != nil {
		return m.ItemType
	}
	return ""
}

func (m *Item) GetItemSubject() string {
	if m != nil {
		return m.ItemSubject
	}
	return ""
}

func (m *Item) GetItemMedia() string {
	if m != nil {
		return m.ItemMedia
	}
	return ""
}

func (m *Item) GetItemSize() string {
	if m != nil {
		return m.ItemSize
	}
	return ""
}

func (m *Item) GetItemImage() string {
	if m != nil {
		return m.ItemImage
	}
	return ""
}

func (m *Item) GetAESKey() string {
	if m != nil {
		return m.AESKey
	}
	return ""
}

func (m *Item) GetItemBasePrice() string {
	if m != nil {
		return m.ItemBasePrice
	}
	return ""
}

func (m *Item) GetCurrentOwnerId() string {
	if m != nil {
		return m.CurrentOwnerId
	}
	return ""
}

func init() {
	proto.RegisterType((*Item)(nil), "jack139.artchain.inventory.Item")
}

func init() { proto.RegisterFile("inventory/item.proto", fileDescriptor_e5ef12a06e9d67fd) }

var fileDescriptor_e5ef12a06e9d67fd = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x29, 0x60, 0x81, 0x45, 0x38, 0x6c, 0x88, 0x99, 0x10, 0xd3, 0x10, 0x63, 0x0c, 0x17,
	0xdb, 0x18, 0x4e, 0x1e, 0x25, 0x1a, 0x43, 0x8c, 0xd1, 0x80, 0x27, 0x6f, 0xcb, 0x76, 0x52, 0x16,
	0x6d, 0x4b, 0x96, 0x45, 0xad, 0x4f, 0xe1, 0x13, 0xf8, 0x3c, 0x1e, 0x39, 0x7a, 0x34, 0xf0, 0x22,
	0x66, 0x17, 0xda, 0xa2, 0xb7, 0xf9, 0xff, 0xef, 0xff, 0x67, 0x9b, 0x4c, 0x49, 0x4b, 0x44, 0x2f,
	0x18, 0xa9, 0x58, 0x26, 0x9e, 0x50, 0x18, 0xba, 0x33, 0x19, 0xab, 0x98, 0xb6, 0xa7, 0x8c, 0x3f,
	0x9d, 0xf5, 0xce, 0x5d, 0x26, 0x15, 0x9f, 0x30, 0x11, 0xb9, 0x59, 0xac, 0xdd, 0x0a, 0xe2, 0x20,
	0x36, 0x31, 0x4f, 0x4f, 0x9b, 0xc6, 0xd1, 0x67, 0x89, 0x94, 0x07, 0x0a, 0x43, 0x0a, 0xa4, 0xc2,
	0x25, 0x32, 0x15, 0x4b, 0xb0, 0x3a, 0x56, 0xb7, 0x36, 0x4c, 0x25, 0x6d, 0x92, 0xa2, 0xf0, 0xa1,
	0xd8, 0xb1, 0xba, 0xe5, 0x61, 0x51, 0xf8, 0x3a, 0x29, 0x91, 0x3f, 0x24, 0x33, 0x84, 0xd2, 0x26,
	0xb9, 0x95, 0xb4, 0x4d, 0xaa, 0xfa, 0x63, 0x2e, 0x71, 0xce, 0xa1, 0x6c, 0x50, 0xa6, 0xa9, 0x43,
	0xc8, 0x66, 0x56, 0x4c, 0x3c, 0xc3, 0x9e, 0xa1, 0x3b, 0x4e, 0xd6, 0x65, 0x0a, 0xc1, 0xde, 0xe9,
	0x32, 0x95, 0xed, 0x35, 0x4f, 0x56, 0x72, 0x66, 0xde, 0xec, 0x90, 0xba, 0x9e, 0x47, 0x8b, 0xf1,
	0x14, 0xb9, 0x82, 0xaa, 0xc1, 0xbb, 0x16, 0x3d, 0x24, 0x35, 0x2d, 0x6f, 0xd1, 0x17, 0x0c, 0x6a,
	0x86, 0xe7, 0x46, 0xba, 0x7b, 0x24, 0xde, 0x11, 0x48, 0xbe, 0x5b, 0xeb, 0xb4, 0x39, 0x08, 0x59,
	0x80, 0x50, 0xcf, 0x9b, 0xc6, 0xa0, 0x07, 0xc4, 0xbe, 0xb8, 0x1a, 0xdd, 0x60, 0x02, 0xfb, 0x06,
	0xd9, 0xcc, 0x28, 0x7a, 0x4c, 0x1a, 0x3a, 0xd4, 0x67, 0x73, 0xbc, 0x97, 0x82, 0x23, 0x34, 0x0c,
	0xfe, 0x6b, 0xd2, 0x13, 0xd2, 0xe4, 0x0b, 0x29, 0x31, 0x52, 0x77, 0xaf, 0x11, 0xca, 0x81, 0x0f,
	0x4d, 0x13, 0xfb, 0xe7, 0xf6, 0xaf, 0xbf, 0x56, 0x8e, 0xb5, 0x5c, 0x39, 0xd6, 0xcf, 0xca, 0xb1,
	0x3e, 0xd6, 0x4e, 0x61, 0xb9, 0x76, 0x0a, 0xdf, 0x6b, 0xa7, 0xf0, 0x78, 0x1a, 0x08, 0x35, 0x59,
	0x8c, 0x5d, 0x1e, 0x87, 0xde, 0xf6, 0xee, 0x5e, 0x7a, 0x77, 0xef, 0xcd, 0xcb, 0x7f, 0x10, 0x95,
	0xcc, 0x70, 0x3e, 0xb6, 0xcd, 0xc1, 0x7b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xf4, 0x6b,
	0x3f, 0x3a, 0x02, 0x00, 0x00,
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentOwnerId) > 0 {
		i -= len(m.CurrentOwnerId)
		copy(dAtA[i:], m.CurrentOwnerId)
		i = encodeVarintItem(dAtA, i, uint64(len(m.CurrentOwnerId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ItemBasePrice) > 0 {
		i -= len(m.ItemBasePrice)
		copy(dAtA[i:], m.ItemBasePrice)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemBasePrice)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AESKey) > 0 {
		i -= len(m.AESKey)
		copy(dAtA[i:], m.AESKey)
		i = encodeVarintItem(dAtA, i, uint64(len(m.AESKey)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ItemImage) > 0 {
		i -= len(m.ItemImage)
		copy(dAtA[i:], m.ItemImage)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemImage)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ItemSize) > 0 {
		i -= len(m.ItemSize)
		copy(dAtA[i:], m.ItemSize)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemSize)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ItemMedia) > 0 {
		i -= len(m.ItemMedia)
		copy(dAtA[i:], m.ItemMedia)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemMedia)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ItemSubject) > 0 {
		i -= len(m.ItemSubject)
		copy(dAtA[i:], m.ItemSubject)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemSubject)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ItemType) > 0 {
		i -= len(m.ItemType)
		copy(dAtA[i:], m.ItemType)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ItemDate) > 0 {
		i -= len(m.ItemDate)
		copy(dAtA[i:], m.ItemDate)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ItemDetail) > 0 {
		i -= len(m.ItemDetail)
		copy(dAtA[i:], m.ItemDetail)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemDetail)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ItemDesc) > 0 {
		i -= len(m.ItemDesc)
		copy(dAtA[i:], m.ItemDesc)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemDesc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecType) > 0 {
		i -= len(m.RecType)
		copy(dAtA[i:], m.RecType)
		i = encodeVarintItem(dAtA, i, uint64(len(m.RecType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	l = len(m.RecType)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemDesc)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemDetail)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemDate)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemType)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemSubject)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemMedia)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemSize)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemImage)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.AESKey)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ItemBasePrice)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.CurrentOwnerId)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDetail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemMedia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemMedia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AESKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AESKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemBasePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemBasePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)
